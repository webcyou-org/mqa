{"version":3,"file":"mqa.umd.js","sources":["../src/models/state.ts","../src/utils/const.ts","../src/models/MQA.ts","../src/core/mediaQueryChangeEvent.ts","../src/api/addEvent.ts","../src/api/init.ts","../src/api/getType.ts","../src/api/getState.ts","../src/api/resetEvent.ts","../src/api/is.ts"],"sourcesContent":["import { Breakpoint } from '../types/breakpoint'\n\nexport interface State extends Breakpoint {}\n\nexport let state: State = {\n    type: 'large',\n    deviceType: 'pc',\n    query: '(min-width: 1201px)'\n}\n","import { Breakpoint } from '../types/index'\n\nexport const BREAKPOINT_LIST: Breakpoint[] = [\n    {\n        type: 'large',\n        deviceType: 'pc',\n        query: '(min-width: 1201px)'\n    },\n    {\n        type: 'middle',\n        deviceType: 'tab',\n        query: '(max-width: 1200px) and (min-width: 769px)'\n    },\n    {\n        type: 'small',\n        deviceType: 'sp',\n        query: '(max-width: 768px)'\n    }\n]\n","import { BREAKPOINT_LIST } from '../utils/const'\nimport { Breakpoint } from '../types/breakpoint'\nimport { state } from './state'\n\nexport class MQA {\n    private static _instance: MQA = null;\n    breakpointList: Breakpoint[] = BREAKPOINT_LIST;\n\n    constructor(option?: any) {\n        if (MQA._instance) {\n            console.log('_instance 返却')\n            return MQA._instance;\n        } else {\n            MQA._instance = this;\n        }\n        if (option) {\n            this.setBreakpointList(Array.isArray(option) ? option : [option]);\n        }\n        this.check();\n    }\n\n    check(): void {\n        this.breakpointList.forEach(breakpoint => {\n            if (window.matchMedia(breakpoint.query).matches) {\n                state.type = breakpoint.type\n                state.deviceType = breakpoint.deviceType\n                state.query = breakpoint.query\n            }\n        })\n    }\n\n    static getInstance(): MQA {\n        return MQA._instance;\n    }\n\n    setBreakpointList(breakpointList: Breakpoint[]): void {\n        this.breakpointList = breakpointList;\n        state.type = breakpointList[0].type;\n        state.deviceType = breakpointList[0].deviceType;\n        state.query = breakpointList[0].query;\n    }\n\n    isMatch(context: string): boolean {\n        return state.type === context || state.deviceType === context || state.query === context;\n    }\n\n    isType(type: string): boolean {\n        return state.type === type;\n    }\n\n    isDeviceType(deviceType: string): boolean {\n        return state.deviceType === deviceType;\n    }\n\n    isQuery(query: string): boolean {\n        return state.query === query;\n    }\n}\n\nexport const mqa = new MQA();\n","export function mediaQueryChangeEvent(event: any): void {\n    if (event.matches) {\n        console.log('change')\n    }\n}\n","import { mqa } from '../models'\nimport { mediaQueryChangeEvent } from '../core'\n\nexport function addEvent(): void {\n    mqa.breakpointList.forEach(breakpoint => {\n        window.matchMedia(breakpoint.query).addEventListener('change', mediaQueryChangeEvent)\n    })\n}\n","import { addEvent } from './addEvent'\nimport { MQA } from '../models'\n\nexport function init(option: any): void {\n    const mqa = new MQA(option);\n    addEvent();\n}\n","import { state } from '../models'\n\nexport function getType(): string {\n    return state.type\n}\n","import { state, State } from '../models'\n\nexport function getState(): State {\n    return state\n}\n","import { mqa } from '../models'\nimport { mediaQueryChangeEvent } from '../core'\n\nexport function resetEvent(): void {\n    mqa.breakpointList.forEach(breakpoint => {\n        window.matchMedia(breakpoint.query).removeEventListener('change', mediaQueryChangeEvent);\n    })\n}\n","import { mqa } from '../models'\n\nexport function isMatch(context: string): boolean {\n    return mqa.isMatch(context);\n}\n\nexport function isType(type: string): boolean {\n    return mqa.isType(type);\n}\n\nexport function isDeviceType(deviceType: string): boolean {\n    return mqa.isDeviceType(deviceType);\n}\n\nexport function isQuery(query: string): boolean {\n    return mqa.isQuery(query);\n}\n"],"names":[],"mappings":"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"}